// tfplayer

"Games"
{
	"#default"
	{
		"#supported"
		{
			engine "tf2"
		}
		
		"sigsegv"
		{
			"addrs"
			{
				"CTFPlayer::ApplyAbsVelocityImpulse"
				{
					type   "func ebpprologue unistr"
					sym    "_ZN9CTFPlayer23ApplyAbsVelocityImpulseERK6Vector"
					unistr "mult_aiming_knockback_resistance"
				}
				"CTFPlayer::ApplyPushFromDamage"
				{
					type "sym"
					sym  "_ZN9CTFPlayer19ApplyPushFromDamageERK15CTakeDamageInfo6Vector"
				}
				"CTFPlayer::IsMiniBoss"
				{
					type "sym"
					sym  "_ZNK9CTFPlayer10IsMiniBossEv"
				}
				"CTFPlayer::IsPlayerClass"
				{
					type "sym"
					sym  "_ZNK9CTFPlayer13IsPlayerClassEi"
				}
				"CTFPlayer::ShouldGib"
				{
					type   "func ebpprologue unistr"
					sym    "_ZN9CTFPlayer9ShouldGibERK15CTakeDamageInfo"
					unistr "crit_kill_will_gib"
				}
				"CTFPlayer::SpeakConceptIfAllowed"
				{
					type   "func ebpprologue unistr"
					sym    "_ZN9CTFPlayer21SpeakConceptIfAllowedEiPKcPcjP16IRecipientFilter"
					unistr "disguiseclass:%s"
				}
				"CTFPlayer::TFPlayerThink"
				{
					// weird function with dual ebx/ebp frame pointers for 16-byte alignment
					type   "func ebpprologue unistr"
					sym    "_ZN9CTFPlayer13TFPlayerThinkEv"
					unistr "Heal Target: ClipSize Data Limit Exceeded: %d (max 500)\n"
					// alt: "disguise_as_dispenser_on_crouch"
					// alt: "#TF_Powerup_Supernova_Deploy"
					// alt: "respawn_ghost"
					// alt: "reviver"
					// alt: "sticky_jump_landed"
					// alt: "rocket_jump_landed"
					// alt: "head_scale"
					// alt: "torso_scale"
					// alt: "hand_scale"
				}
				"CTFPlayer::Taunt"
				{
					type "sym"
					sym  "_ZN9CTFPlayer5TauntE8taunts_ti"
				}
				"CTFPlayer::FireBullet"
				{
					type   "func ebpprologue unistr"
					sym    "_ZN9CTFPlayer10FireBulletEP13CTFWeaponBaseRK17FireBulletsInfo_tbii"
					unistr "penetration_damage_penalty"
				}
				"CTFPlayer::ForceChangeTeam"
				{
					type "sym"
					sym  "_ZN9CTFPlayer15ForceChangeTeamEib"
				}
				"CTFPlayer::ForceRespawn"
				{
					type "sym"
					sym  "_ZN9CTFPlayer12ForceRespawnEv"
				}
				
				"CTFPlayer::SpeakConceptIfAllowed"
				{
					type "sym"
					sym  "_ZN9CTFPlayer21SpeakConceptIfAllowedEiPKcPcjP16IRecipientFilter"
				}
				
				"CTFPlayer::StartBuildingObjectOfType"
				{
					type "sym"
					sym  "_ZN9CTFPlayer25StartBuildingObjectOfTypeEii"
				}
				
				"CTFPlayer::GetLoadoutItem"
				{
					type "sym"
					sym  "_ZN9CTFPlayer14GetLoadoutItemEiib"
				}
				
				"CTFPlayerShared::AddCond"
				{
					type "sym"
					sym  "_ZN15CTFPlayerShared7AddCondE7ETFCondfP11CBaseEntity"
				}
				"CTFPlayerShared::RemoveCond"
				{
					type "sym"
					sym  "_ZN15CTFPlayerShared10RemoveCondE7ETFCondb"
				}
				"CTFPlayerShared::InCond"
				{
					type "sym"
					sym  "_ZNK15CTFPlayerShared6InCondE7ETFCond"
				}
				
				"GetTFConditionName"
				{
					type "sym"
					sym  "_Z18GetTFConditionName7ETFCond"
				}
				"GetTFConditionFromName"
				{
					type "sym"
					sym  "_Z22GetTFConditionFromNamePKc"
				}
			}
		}
	}
}
