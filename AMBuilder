# vim: set sts=2 ts=8 sw=2 tw=99 et ft=python:
import os, sys

projectName = 'sigsegv'

# smsdk_ext.cpp will be automatically added later
sourceFiles = [
  'src/common.h',
  'libs/lz4/lib/lz4.c',
  os.path.join(Extension.sm_root, 'public', 'asm', 'asm.c'),
  'src/sm/detours.cpp',
  'src/sm/MemoryUtils.cpp',
  'src/sdk2013/debugoverlay_shared.cpp',
  'src/sdk2013/util_shared.cpp',
  'src/common.cpp',
  'src/version.c',
  'src/sizeof.cpp',
  'src/extension.cpp',
  'src/factory.cpp',
  'src/gameconf.cpp',
  'src/library.cpp',
  'src/concolor.cpp',
  'src/convar_restore.cpp',
  'src/disasm/disasm.cpp',
  'src/addr/addr.cpp',
  'src/addr/standard.cpp',
  'src/addr/prescan.cpp',
  'src/addr/misc.cpp',
  'src/mem/detour.cpp',
  'src/mem/patch.cpp',
  'src/mem/scan.cpp',
  'src/prop.cpp',
  'src/util/trace.cpp',
  'src/util/backtrace.cpp',
  'src/util/rtti.cpp',
  'src/util/prof.cpp',
  'src/util/socket_old.cpp',
  'src/util/firehose_base.cpp',
  'src/util/firehose_send.cpp',
  'src/util/firehose_recv.cpp',
  'src/stub/baseentity.cpp',
  'src/stub/gamerules.cpp',
  'src/stub/misc.cpp',
  'src/stub/nav.cpp',
  'src/stub/populators.cpp',
  'src/stub/tfplayer.cpp',
  'src/stub/tfbot.cpp',
  'src/stub/projectiles.cpp',
  'src/stub/entities.cpp',
  'src/stub/tfweaponbase.cpp',
  'src/stub/tf_objective_resource.cpp',
  'src/stub/usermessages.cpp',
  'src/stub/objects.cpp',
  'src/stub/econ.cpp',
  'src/stub/cdebugoverlay.cpp',
  'src/stub/particles.cpp',
  'src/stub/igamesystem.cpp',
  'src/stub/tfbot_behavior.cpp',
  'src/stub/baseplayer.cpp',
  'src/stub/baseanimating.cpp',
  'src/stub/dt_send.cpp',
  'src/stub/upgrades.cpp',
  'src/link/link.cpp',
  'src/link/nextbot1.cpp',
  'src/link/nextbot2.cpp',
  'src/link/debugoverlay.cpp',
  'src/re/nextbot.cpp',
  'src/mod.cpp',
  'src/mod/ai/engiebot_dispensers.cpp',
  'src/mod/ai/engiebot_nopush.cpp',
  'src/mod/ai/improved_useitem.cpp',
  'src/mod/ai/focus_one_player.cpp',
  'src/mod/ai/prevent_postmortem_updates.cpp',
  'src/mod/ai/rocketjump.cpp',
  'src/mod/ai/wrapassassin_altfire.cpp',
  'src/mod/ai/nextboteventresponder_hooks.cpp',
  'src/mod/ai/mvm_defender_bots.cpp',
  'src/mod/ai/mvm_defender_bots/quirks/isfakeclient.cpp',
  'src/mod/ai/mvm_defender_bots/quirks/isbot.cpp',
  'src/mod/ai/mvm_defender_bots/quirks/isbotoftype.cpp',
  'src/mod/ai/mvm_defender_bots/quirks/getlastknownarea.cpp',
  'src/mod/ai/mvm_defender_bots/quirks/mannvsmachinemode.cpp',
  'src/mod/ai/mvm_defender_bots/quirks/steamid.cpp',
  'src/mod/ai/mvm_defender_bots/trackers.cpp',
  'src/mod/ai/mvm_defender_bots/trackers/credits.cpp',
  'src/mod/ai/mvm_defender_bots/trackers/flags.cpp',
  'src/mod/ai/mvm_defender_bots/trackers/gates.cpp',
  'src/mod/ai/mvm_defender_bots/trackers/tanks.cpp',
  'src/mod/ai/mvm_defender_bots/actions/defender.cpp',
  'src/mod/ai/mvm_defender_bots/actions/attack_tank.cpp',
  'src/mod/ai/mvm_defender_bots/actions/defend_gate.cpp',
  'src/mod/ai/mvm_defender_bots/actions/collect_money.cpp',
  'src/mod/ai/mvm_defender_bots/actions/mark_giant.cpp',
  'src/mod/ai/mvm_defender_bots/actions/goto_upgrade_station.cpp',
  'src/mod/ai/mvm_defender_bots/actions/purchase_upgrades.cpp',
  'src/mod/ai/mvm_defender_bots/actions/prewave.cpp',
  'src/mod/attr/undocumented.cpp',
  'src/mod/bot/kill_before_forcespec.cpp',
  'src/mod/bot/medieval_nonmelee.cpp',
  'src/mod/bot/multiclass_weapon.cpp',
  'src/mod/bot/runfast.cpp',
  'src/mod/canteen/share_recall_canteen.cpp',
  'src/mod/cond/reprogrammed.cpp',
  'src/mod/credits/spawn_autocollect.cpp',
  'src/mod/debug/backtrace.cpp',
  'src/mod/debug/client_desync.cpp',
  'src/mod/debug/known_entities.cpp',
  'src/mod/debug/medigunshield_obstruction.cpp',
  'src/mod/debug/multidetour.cpp',
  'src/mod/debug/parachute_warp.cpp',
  'src/mod/debug/penetration.cpp',
  'src/mod/debug/revive_fast.cpp',
  'src/mod/debug/suicide_bomber.cpp',
  'src/mod/debug/useitem_broken.cpp',
  'src/mod/debug/usermsg_overflow.cpp',
  'src/mod/debug/projectile_motion.cpp',
#  'src/mod/debug/popmgr_multiparse.cpp',
  'src/mod/debug/noknockback.cpp',
  'src/mod/debug/draw_cphyscollide.cpp',
  'src/mod/debug/grenade_vphysics.cpp',
  'src/mod/debug/list_competitive_convars.cpp',
  'src/mod/debug/grenade_logger.cpp',
  'src/mod/debug/nav_mesh.cpp',
  'src/mod/debug/sticky_detonation_order.cpp',
  'src/mod/debug/feigndeath_ragdoll.cpp',
  'src/mod/debug/deflect_angle.cpp',
  'src/mod/debug/deflect_angle_v2.cpp',
  'src/mod/debug/nextbot.cpp',
  'src/mod/debug/tank_destroy_animation.cpp',
  'src/mod/debug/stringtables.cpp',
  'src/mod/debug/popmgr_exploit.cpp',
  'src/mod/debug/sentry_crouch_aim.cpp',
  'src/mod/debug/vprof_record.cpp',
  'src/mod/debug/changelevel.cpp',
  'src/mod/debug/client_player_track.cpp',
  'src/mod/debug/onkilled_before_mainaction_start.cpp',
  'src/mod/debug/airblastvuln.cpp',
  'src/mod/debug/flamethrower_mojo.cpp',
#  'src/mod/debug/override_step_sound.cpp',
  'src/mod/demo/stringtable_limit.cpp',
  'src/mod/etc/limp_projectiles.cpp',
  'src/mod/etc/override_move_speed.cpp',
  'src/mod/etc/medicgun_beam_machinery.cpp',
  'src/mod/mvm/changeclass_anytime.cpp',
  'src/mod/mvm/disposable_dispenser.cpp',
  'src/mod/mvm/explosive_headshot_on_everything.cpp',
  'src/mod/mvm/sentrybuster_enhancements.cpp',
  'src/mod/mvm/refund_exploit_fix.cpp',
  'src/mod/mvm/medigunshield_damage.cpp',
  'src/mod/perf/flame_breakable_collision.cpp',
  'src/mod/pop/eventpopfile_improvements.cpp',
#  'src/mod/pop/extattr/parse.cpp',
#  'src/mod/pop/extattr/alwaysfireweaponalt.cpp',
#  'src/mod/pop/extattr/targetstickies.cpp',
  'src/mod/pop/kv_conditional.cpp',
  'src/mod/pop/nested_complex_spawners.cpp',
  'src/mod/pop/popmgr_extensions.cpp',
  'src/mod/pop/tfbot_extensions.cpp',
  'src/mod/pop/wave_extensions.cpp',
  'src/mod/pop/tank_extensions.cpp',
#  'src/mod/pop/ecattr_extensions.cpp',
  'src/mod/prof/flame_breakable_collision.cpp',
  'src/mod/prof/attr_munge.cpp',
  'src/mod/robot/no_canteens.cpp',
  'src/mod/robot/standable_heads.cpp',
  'src/mod/robot/ticklish.cpp',
  'src/mod/sniper/charge_uncap.cpp',
  'src/mod/sniper/head_uncap.cpp',
  'src/mod/sound/tele_activate.cpp',
  'src/mod/util/console_recv.cpp',
  'src/mod/util/console_send.cpp',
  'src/mod/util/listenserverhost.cpp',
  'src/mod/util/overlay_recv.cpp',
  'src/mod/util/overlay_send.cpp',
  'src/mod/util/jumboframes.cpp',
#  'src/mod/util/vprof_remote.cpp',
  'src/mod/util/vprof_recv.cpp',
  'src/mod/util/vprof_send.cpp',
  'src/mod/util/debugoverlay_font.cpp',
  'src/mod/visualize/airblast.cpp',
  'src/mod/visualize/blast_radius.cpp',
  'src/mod/visualize/dispenser_radius.cpp',
  'src/mod/visualize/explosive_headshot.cpp',
  'src/mod/visualize/minigun_deflect.cpp',
  'src/mod/visualize/taunt_attacks.cpp',
  'src/mod/visualize/jar_radius.cpp',
  'src/mod/visualize/projectile_trail.cpp',
  'src/mod/visualize/projectile_speed.cpp',
  'src/mod/visualize/hitboxes.cpp',
  'src/mod/visualize/melee_range.cpp',
  'src/mod/visualize/damage_force.cpp',
]

###############
# Make sure to edit PackageScript, which copies your files to their appropriate locations
# Simple extensions do not need to modify past this point.

project = Extension.HL2Project(builder, projectName + '.ext')

if os.path.isfile(os.path.join(builder.currentSourcePath, 'src', 'sdk', 'smsdk_ext.cpp')):
  # Use the copy included in the project
  project.sources += [os.path.join('src', 'sdk', 'smsdk_ext.cpp')]
else:
  # Use the copy included with SM 1.6 and newer
  project.sources += [os.path.join(Extension.sm_root, 'public', 'smsdk_ext.cpp')]

project.sources += sourceFiles

for sdk_name in Extension.sdks:
  sdk = Extension.sdks[sdk_name]
  
  binary = Extension.HL2Config(project, projectName + '.ext.' + sdk.ext, sdk)


# always touch autogen.h, so that src/version.c will be forced to rebuild;
# otherwise GetBuildDate and GetBuildTime would contain stale information
_, autogen = builder.AddCommand(
  inputs  = builder.ALWAYS_DIRTY,
  outputs = [ 'autogen.h' ],
  argv    = [ 'touch', 'autogen.h' ],
)
binary.compiler.sourcedeps += autogen


binary.compiler.cflags += [ '-include', 'common.h' ]

binary.compiler.linkflags += [
  '-liberty',
  '-lunwind',
  '-lunwind-x86',
  os.path.join(builder.currentSourcePath, 'libs', 'capstone', 'libcapstone.a'),
  os.path.join(builder.currentSourcePath, 'libs', 'ann', 'lib', 'libANN.a'),
]

binary.compiler.includes += [
  os.path.join(builder.buildPath), # for autogen.h
  os.path.join(builder.currentSourcePath, 'libs', 'lz4', 'lib'),
  os.path.join(builder.currentSourcePath, 'libs', 'capstone', 'include'),
  os.path.join(builder.currentSourcePath, 'libs', 'ann', 'include'),
]

# TODO: find a better way to handle NASM inputs
binary.compiler.linkflags += [
  '../wrapper.o',
]


Extension.extensions = builder.Add(project)
